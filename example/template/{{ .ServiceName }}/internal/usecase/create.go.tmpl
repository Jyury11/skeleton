// Code generated by skeleton; DO NOT EDIT.

package usecase
{{- $model := .model }}
{{- $event := index .model.events 0 }}
import (
	"context"
	"log"

	"github.com/jyury11/skeleton/example/dst/{{ .ServiceName }}/internal/entity"
	"github.com/jyury11/skeleton/example/dst/{{ .ServiceName }}/internal/repository"
)

// {{ index $event.name | Title }}Command ...
type {{ index $event.name | Title }}Command struct {
	Id int
}

// New{{ index $event.name | Title }}Command ...
func New{{ index $event.name | Title }}Command(id int) {{ index $event.name | Title }}Command {
	return {{ index $event.name | Title }}Command{
		Id: id,
	}
}

// {{ index $event.name | Title }}UseCase ...
type {{ index $event.name | Title }}UseCase interface {
	Handle(ctx context.Context, cmd {{ index $event.name | Title }}Command) error
}

// {{ index $event.name }} ...
type {{ index $event.name }} struct {
	repo repository.Repository
}

// New{{ index $event.name | Title }} ...
func New{{ index $event.name | Title }}(repo repository.Repository) *{{ index $event.name }} {
	return &{{ index $event.name }}{repo: repo}
}

// Handle ...
func (h *{{ index $event.name }}) Handle(ctx context.Context, cmd {{ index $event.name | Title }}Command) error {
	log.Println(entity.{{ $model.name | Title }}{{ index $event.name | Title }}Event)
	p := entity.New{{ $model.name | Title }}(cmd.Id)
	return h.repo.Save(p)
}
